// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowProjectTP2.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ScrutinFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Ballot.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Scrutin", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Scrutin")))
            {
                global::SpecFlowProjectTP2.Features.ScrutinFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Majority in the first turn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scrutin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MajorityFirstTurn")]
        public virtual void MajorityInTheFirstTurn()
        {
            string[] tagsOfScenario = new string[] {
                    "MajorityFirstTurn"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Majority in the first turn", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table1.AddRow(new string[] {
                            "Johan",
                            "Campion",
                            "13/07/1997",
                            "1"});
                table1.AddRow(new string[] {
                            "Francois",
                            "Roullaud",
                            "16/10/1999",
                            "2"});
                table1.AddRow(new string[] {
                            "Jean-Charles",
                            "Durand",
                            "05/05/1989",
                            "3"});
#line 5
 testRunner.Given("the candidates are", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "CandidateCode"});
                table2.AddRow(new string[] {
                            "2"});
                table2.AddRow(new string[] {
                            "1"});
                table2.AddRow(new string[] {
                            "1"});
                table2.AddRow(new string[] {
                            "1"});
#line 10
 testRunner.And("the votes are", ((string)(null)), table2, "And ");
#line hidden
#line 17
 testRunner.And("the ballot is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.When("first turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table3.AddRow(new string[] {
                            "Johan",
                            "Campion",
                            "13/07/1997",
                            "1"});
#line 19
 testRunner.Then("the winner of the ballot should be", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("No Majority in the first turn : two candidates selected for second turn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scrutin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("NoMajorityFirstTurn")]
        public virtual void NoMajorityInTheFirstTurnTwoCandidatesSelectedForSecondTurn()
        {
            string[] tagsOfScenario = new string[] {
                    "NoMajorityFirstTurn"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No Majority in the first turn : two candidates selected for second turn", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table4.AddRow(new string[] {
                            "Francois",
                            "Roullaud",
                            "16/10/1999",
                            "2"});
                table4.AddRow(new string[] {
                            "Jean-Charles",
                            "Durand",
                            "05/05/1989",
                            "3"});
                table4.AddRow(new string[] {
                            "Johan",
                            "Campion",
                            "13/07/1997",
                            "1"});
#line 25
 testRunner.Given("the candidates are", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "CandidateCode"});
                table5.AddRow(new string[] {
                            "1"});
                table5.AddRow(new string[] {
                            "2"});
#line 30
 testRunner.And("the votes are", ((string)(null)), table5, "And ");
#line hidden
#line 34
 testRunner.And("the ballot is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.When("first turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table6.AddRow(new string[] {
                            "Johan",
                            "Campion",
                            "13/07/1997",
                            "1"});
                table6.AddRow(new string[] {
                            "Francois",
                            "Roullaud",
                            "16/10/1999",
                            "2"});
#line 36
 testRunner.Then("the winner of the ballot should be", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("No Majority in the first turn & tie for the second candidate : the oldest candida" +
            "te wins")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scrutin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TieForSecond")]
        public virtual void NoMajorityInTheFirstTurnTieForTheSecondCandidateTheOldestCandidateWins()
        {
            string[] tagsOfScenario = new string[] {
                    "TieForSecond"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No Majority in the first turn & tie for the second candidate : the oldest candida" +
                    "te wins", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table7.AddRow(new string[] {
                            "Francois",
                            "Roullaud",
                            "16/10/1999",
                            "2"});
                table7.AddRow(new string[] {
                            "Jean-Charles",
                            "Durand",
                            "05/05/1989",
                            "3"});
                table7.AddRow(new string[] {
                            "Johan",
                            "Campion",
                            "13/07/1997",
                            "1"});
#line 43
 testRunner.Given("the candidates are", ((string)(null)), table7, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "CandidateCode"});
                table8.AddRow(new string[] {
                            "1"});
                table8.AddRow(new string[] {
                            "2"});
                table8.AddRow(new string[] {
                            "2"});
                table8.AddRow(new string[] {
                            "3"});
#line 48
 testRunner.And("the votes are", ((string)(null)), table8, "And ");
#line hidden
#line 54
 testRunner.And("the ballot is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.When("first turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table9.AddRow(new string[] {
                            "Francois",
                            "Roullaud",
                            "16/10/1999",
                            "2"});
                table9.AddRow(new string[] {
                            "Jean-Charles",
                            "Durand",
                            "05/05/1989",
                            "3"});
#line 56
 testRunner.Then("the winner of the ballot should be", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A candidate wins the second turn (more votes)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scrutin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MajoritySecondTurn")]
        public virtual void ACandidateWinsTheSecondTurnMoreVotes()
        {
            string[] tagsOfScenario = new string[] {
                    "MajoritySecondTurn"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A candidate wins the second turn (more votes)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table10.AddRow(new string[] {
                            "Johan",
                            "Campion",
                            "13/07/1997",
                            "1"});
                table10.AddRow(new string[] {
                            "Francois",
                            "Roullaud",
                            "16/10/1999",
                            "2"});
                table10.AddRow(new string[] {
                            "Jean-Charles",
                            "Durand",
                            "05/05/1989",
                            "3"});
#line 64
 testRunner.Given("the candidates are", ((string)(null)), table10, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "CandidateCode"});
                table11.AddRow(new string[] {
                            "1"});
                table11.AddRow(new string[] {
                            "3"});
                table11.AddRow(new string[] {
                            "3"});
#line 69
 testRunner.And("the votes are", ((string)(null)), table11, "And ");
#line hidden
#line 74
 testRunner.And("the ballot is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.When("second turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table12.AddRow(new string[] {
                            "Jean-Charles",
                            "Durand",
                            "05/05/1989",
                            "3"});
#line 76
 testRunner.Then("the winner of the ballot should be", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The oldest candidate wins the second turn (tie)")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scrutin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("TieSecondTurn")]
        public virtual void TheOldestCandidateWinsTheSecondTurnTie()
        {
            string[] tagsOfScenario = new string[] {
                    "TieSecondTurn"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The oldest candidate wins the second turn (tie)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table13.AddRow(new string[] {
                            "Johan",
                            "Campion",
                            "13/07/1997",
                            "1"});
                table13.AddRow(new string[] {
                            "Francois",
                            "Roullaud",
                            "16/10/1999",
                            "2"});
                table13.AddRow(new string[] {
                            "Jean-Charles",
                            "Durand",
                            "05/05/1989",
                            "3"});
#line 82
 testRunner.Given("the candidates are", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "CandidateCode"});
                table14.AddRow(new string[] {
                            "1"});
                table14.AddRow(new string[] {
                            "3"});
#line 87
 testRunner.And("the votes are", ((string)(null)), table14, "And ");
#line hidden
#line 91
 testRunner.And("the ballot is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.When("second turn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "CandidateCode"});
                table15.AddRow(new string[] {
                            "Jean-Charles",
                            "Durand",
                            "05/05/1989",
                            "3"});
#line 93
 testRunner.Then("the winner of the ballot should be", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
